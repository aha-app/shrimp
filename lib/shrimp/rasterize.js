var args, cookies, e, f, fs, i, j, margin, orientation, page, paperSize, ref, render_time, statusCode, system;

page = require('webpage').create();

fs = require('fs');

system = require('system');

args = {};

for (i = j = 1, ref = system.args.length - 1; j <= ref; i = j += 2) {
  args[system.args[i].replace(/^-/, '')] = system.args[i + 1];
}

console.log(JSON.stringify(args));

margin = args.margin || '0cm';

orientation = args.orientation || 'portrait';

render_time = parseInt(args.rendering_time || 10000);

cookies = {};

if (args.cookies != null) {
  try {
    f = fs.open(args.cookies, "r");
    cookies = JSON.parse(f.read());
    fs.remove(args.cookies);
  } catch (_error) {
    e = _error;
    console.log(e);
  }
  phantom.cookiesEnabled = true;
  phantom.cookies = cookies;
}

page.dpi = 96;

page.viewportSize = {
  width: 1300,
  height: 1200
};

page.zoomFactor = args.zoom || 1.0;

if (args.clip_height != null) {
  page.clipRect = {
    left: 0,
    top: 0,
    width: page.viewportSize.width,
    height: args.clip_height
  };
}

if (args.output_format === "pdf") {
  paperSize = {
    format: args.format,
    orientation: orientation,
    margin: margin
  };
  if (args.header != null) {
    paperSize.header = {
      height: args.header_height || "1cm",
      contents: phantom.callback(function(pageNum, numPages) {
        return fs.read(args.header).replace(/\[pageNum\]/, pageNum).replace(/\[numPages\]/, numPages);
      })
    };
  }
  if (args.footer != null) {
    paperSize.footer = {
      height: args.footer_height || "1cm",
      contents: phantom.callback(function(pageNum, numPages) {
        return fs.read(args.footer).replace(/\[pageNum\]/, pageNum).replace(/\[numPages\]/, numPages);
      })
    };
  }
  page.paperSize = paperSize;
}

statusCode = null;

page.onResourceReceived = (function(_this) {
  return function(resource) {
    if (resource.url === args.input) {
      return statusCode = resource.status;
    }
  };
})(this);

page.customHeaders = {
  "Accept-Encoding": "identity",
  "X-Publishing": "true"
};

page.onError = function(msg, trace) {
  var msgStack;
  msgStack = ['ERROR: ' + msg];
  if (trace && trace.length) {
    msgStack.push('TRACE:');
    trace.forEach(function(t) {
      var ref1;
      return msgStack.push(' -> ' + t.file + ': ' + t.line + ((ref1 = t["function"]) != null ? ref1 : ' (in function "' + t["function"] + {
        '")': ''
      }));
    });
  }
  return console.error(msgStack.join('\n'));
};

page.open(args.input, (function(_this) {
  return function(status) {
    if (status !== 'success' || (statusCode !== 200 && statusCode !== null)) {
      console.log(statusCode, 'Unable to load the address: ', args.input);
      return phantom.exit(1);
    } else {
      return window.setTimeout(function() {
        page.render(args.output);
        if (args.html_output) {
          fs.write(args.html_output, page.content, 'a');
        }
        console.log("Rendered to: " + args.output);
        return phantom.exit();
      }, render_time);
    }
  };
})(this));

// ---
// generated by coffee-script 1.9.2